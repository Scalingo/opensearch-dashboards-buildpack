#!/usr/bin/env bash
# usage: bin/compile <build_dir> <cache_dir> <env_dir>

cmnlib_url="https://github.com/Scalingo/cmnlib/raw/refs/tags/<version>/cmnlib.sh"

#if ! declare -F cmn::output::info >/dev/null; then
#	source /dev/stdin <<< \
#		"$( curl --silent --location --retry 3 "${cmnlib_url}" \
#		|| printf "echo ' ðŸ—™ Unable to load cmnlib, aborting.' >&2 && exit 1"; )"
#fi

# shellcheck disable=SC1091
source "$( cd -P "$( dirname "${0}" )" && pwd )/../cmnlib.sh"

cmn::main::start "${0}" "${1}" "${2}" "${3}"

# -----------------------------------------------------------------------------

# shellcheck disable=SC1091
source "${buildpack_dir}/VERSIONS"
# version=2.19.1
version="${OPENSEARCH_DASHBOARDS_VERSION:-"${OPENSEARCH_DASHBOARDS_DEFAULT_VERSION}"}"

opensearch_gpg_key_url="https://artifacts.opensearch.org/publickeys/opensearch.pgp"
gpg_key_path="${tmp_dir}/opensearch.gpg"

archive="opensearch-dashboards-${version}.tar.gz"
file_url="https://artifacts.opensearch.org/releases/bundle/opensearch-dashboards/${version}/opensearch-dashboards-${version}-linux-x64.tar.gz"
hash_url="${file_url}.sig"
file_path="${tmp_dir}/${archive}"
hash_path="${tmp_dir}/${archive}.sig"
cache_file="${cache_dir}/${archive}"
require_download=0

# -----------------------------------------------------------------------------

if [ -z "${version}" ]; then
	cmn::output::err <<- EOM
		Unable to determine the OpenSearch Dashboards version to deploy.
		Please use the OPENSEARCH_DASHBOARDS_VERSION environment variable to
        specify the version to use.
		Aborting.
	EOM
	exit 11
fi

cmn::output::info "Deploying OpenSearch Dashboards ${version}"

# -----------------------------------------------------------------------------

cmn::step::start "Installing prerequisites"

cmn::task::start "Downloading OpenSearch GPG key"
if ! cmn::file::download "${opensearch_gpg_key_url}" "${gpg_key_path}"; then
	cmn::task::fail
	cmn::step::fail

	exit 12
fi
cmn::task::finish

cmn::task::start "Importing OpenSearch GPG key"
if ! gpg --import "${gpg_key_path}" > /dev/null 2>&1; then
	cmn::task::fail
	cmn::step::fail

	exit 13
fi
cmn::task::finish

cmn::task::start "Downloading archive signature"
if ! cmn::file::download "${hash_url}" "${hash_path}"; then
	cmn::task::fail
	cmn::step::fail

	exit 14
fi
cmn::task::finish

cmn::step::finish

# -----------------------------------------------------------------------------

cmn::step::start "Installing OpenSearch Dashboards"

if [ ! -f "${cache_file}" ]; then
	cmn::task::start "Downloading archive"
	if ! cmn::file::download "${file_url}" "${file_path}"; then
		cmn::task::fail
		cmn::step::fail

		exit 21
	fi
	cmn::task::finish

	cmn::task::start "Putting archive in cache for future use"
	if ! mv "${file_path}" "${cache_file}"; then
		cmn::task::fail
		cmn::step::fail

		exit 22
	fi
	cmn::task::finish
else
	cmn::output::info "Found matching file in cache."
fi

cmn::task::start "Checking archive validity"
if ! gpg --verify "${hash_path}" "${cache_file}" > /dev/null 2>&1; then
	cmn::task::fail
	cmn::output::warn <<- EOM
		Unable to check archive validity.
		I'm now removing the file from the cache to force
		a new download during the next deployment attempt.
	EOM

	# File in cache does not seem valid,
	# remove it so a future run can be successful
	rm --force "${cache_file}"
	cmn::step::fail

	exit 23
fi
cmn::task::finish

# From this point we have a valid file in cache.

cmn::task::start "Extracting"
if ! tar --extract --file="${cache_file}" --directory="${tmp_dir}" 2>/dev/null
then
	cmn::task::fail
	cmn::step::fail

	exit 24
fi
cmn::task::finish

cmn::task::start "Installing"
if ! mv "${tmp_dir}/opensearch-dashboards-${version}/"* \
		--target-directory="${build_dir}" 2>/dev/null
then
	cmn::task::fail
	cmn::step::fail

	exit 25
fi
cmn::task::finish

cmn::task::start "Configuring"
if ! cp "${buildpack_dir}/files/config/opensearch_dashboards.yml" \
		"${build_dir}/config/opensearch_dashboards.yml" 2>/dev/null
then
	cmn::task::fail
	cmn::step::fail

	exit 26
fi
cmn::task::finish

cmn::step::finish

# -----------------------------------------------------------------------------

cmn::step::start "Building Environment"

export PATH="${build_dir}/bin:${PATH}"

cmn::task::start "Copying profile.d script"

mkdir --parents "${build_dir}/.profile.d"

if ! cp "${buildpack_dir}/files/profile.d/050-opensearch-dashboards.sh" \
	"${build_dir}/.profile.d/" 2>/dev/null
then
	cmn::task::fail
	cmn::step::fail

	exit 30
fi

cmn::task::finish

cmn::step::finish

# -----------------------------------------------------------------------------

cmn::step::start "Cleaning up"

cmn::task::start "Removing temporary files"
rm --recursive --force "${tmp_dir}"
cmn::task::finish

cmn::step::finish


cmn::main::finish
